1. 什么是大端,什么是小端:
所谓的大端模式，是指数据的低位保存在内存的高地址中，
而数据的高位，保存在内存的低地址中；

所谓的小端模式，
是指数据的低位保存在内存的低地址中，
而数据的高位保存在内存的高地址中。

1.把ip地址转化为用于网络传输的二进制数值
int inet_aton(const char *cp, struct in_addr *inp);
inet_aton() 
转换网络主机地址ip(如192.168.1.10)为二进制数值，
并存储在struct in_addr结构中，即第二个参数*inp,函数返回非0表示cp主机有地有效，
返回0表示主机地址无效。（这个转换完后不能用于网络传输，
还需要调用htons或htonl函数才能将主机字节顺序转化为网络字节顺序）

in_addr_t inet_addr(const char *cp);
inet_addr函数转换网络主机地址（如192.168.1.10)为网络字节序二进制值，
如果参数char *cp无效，函数返回-1(INADDR_NONE),
这个函数在处理地址为255.255.255.255时也返回－1,255.255.255.255是一个有效的地址，不过inet_addr无法处理;

2.将网络传输的二进制数值转化为成点分十进制的ip地址
char *inet_ntoa(struct in_addr in);
inet_ntoa 函数转换网络字节排序的地址为标准的ASCII以点分开的地址,
该函数返回指向点分开的字符串地址（如192.168.1.10)的指针，
该字符串的空间为静态分配的，这意味着在第二次调用该函数时，
上一次调用将会被重写（复盖），所以如果需要保存该串最后复制出来自己管理！
 